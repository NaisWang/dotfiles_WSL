"  __  ____   __   ______     _____ __  __ 
" |  \/  \ \ / /  / ___\ \   / /_ _|  \/  |
" | |\/| |\ V /  | |  _ \ \ / / | || |\/| |
" | |  | | | |   | |_| | \ V /  | || |  | |
" |_|  |_| |_|    \____|  \_/  |___|_|  |_|
"                                         

" ========
" ======== startup seting	
" ========
"  Auto load for first time uses
" if empty(glob('E:/gvim/autoload/plug.vim'))
"   silent !curl -fLo E:/gvim/autoload/plug.vim --create-dirs
"     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"   autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
" endif

" autosave
set autowriteall

" My Snippets
source C:/Users/Administrator/snippits.vim

set encoding=utf-8

let mapleader=" "
set clipboard=unnamed
set autochdir " automatically switch directory based on file
noremap s <nop>
noremap B b
map U <C-r>

" uppercase and lowercase
noremap gu gU
noremap gU gu

" make the Plugin more compatibility
set nocompatible
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on

" set the language
set langmenu=en_US
let $LANG= 'en_US'

" the tab setting
set tabstop=2     " how many spaces a tab is equal to
set shiftwidth=2
set softtabstop=2
set expandtab    "the tab is replaced by spaces 

" the search setting
set hlsearch
exec "nohlsearch"
set incsearch
set ignorecase
" if have a capital letter, switch to a case-sensitive search
set smartcase
noremap <LEADER><CR> :nohlsearch<CR>

" fold setting
set foldmethod=indent
set foldlevel=99
" undo/redo persistence
set undofile 
" Set the place of undo. You can create the undofir directory first. 
set undodir=~/.vim/undodir

map J 4j
map K 4k

noremap , ;

" Keep cursor at the bottom of the visual selection after you operate it
vmap y ygv<Esc>

" uppercase and lowercase
noremap gu gu
noremap gU gU

" delete the all marks in all buffers and refresh the file
noremap m; :delmarks!<CR>:e<CR>

" Compile function
map <LEADER>c :call CompileRunGcc()<CR>
func! CompileRunGcc()
  exec "w"
  if &filetype == 'html'
    exec "!chromium % &"
  elseif &filetype == 'markdown'
    exec "MarkdownPreview"
  endif
endfunc

" stop run
map <LEADER>s :call StopRun()<CR>
fun! StopRun()
	exec "w"
	if &filetype == 'markdown'
		exec "MarkdownPreviewStop"
	endif
endfunc

" ========
" ======== plugin installation
" ========
call plug#begin('C:/Users/Administrator/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'morhetz/gruvbox' 
Plug 'kshenoy/vim-signature'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-commentary'
Plug 'Yggdroot/indentLine'
Plug 'tpope/vim-surround'
Plug 'easymotion/vim-easymotion'
Plug 'kien/rainbow_parentheses.vim'
Plug 'itchyny/vim-cursorword'  " Underline the word under the cursor
Plug 'mhinz/vim-startify' "  The fancy start screen for Vim.
Plug 'jiangmiao/auto-pairs'
Plug 'iamcco/markdown-preview.vim'
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }
call plug#end()

" ========
" ======== GUI setting	
" ========
colorscheme gruvbox
set bg=dark                       
let g:gruvbox_contrast_dark="hard" 
set guioptions=                   " Get rid of the scrollbar on both sides 
" set guifont=SauceCodePro\ NF:h10
set guifont=Source\ Code\ Pro:h10

set laststatus=1

set wildmenu 

" highlight current line
set cursorline
set scrolloff=5
set relativenumber
set number
syntax on

set smartindent

" Keep cursor from flashing
set guicursor+=a:blinkon0

" ========
" ======== operation
" ========
map <LEADER>r :e C:/Users/Administrator/_vimrc<CR>
map <LEADER>R :source %<CR>

" split setting
map sh :set nosplitright<CR>:vsplit<CR>
map sl :set splitright<CR>:vsplit<CR>
map sj :set nosplitbelow<CR>:split<CR>
map sk :set splitbelow<CR>:split<CR>

map <LEADER>l <C-W>l
map <LEADER>k <C-W>k
map <LEADER>j <C-W>j
map <LEADER>h <C-W>h

map s\ <C-w>t<C-w>H
map s- <C-w>t<C-w>K

" Rotate screens
noremap sr- <C-w>b<C-w>K
noremap sr\ <C-w>b<C-w>H

" window size setting
nmap <up>    :res +5<CR>
nmap <down>  :res -5<CR>
nmap <left>  :vertical resize-5<CR>
nmap <right> :vertical resize+5<CR>

" tab setting
map tu  :tabe
map tc  :q<cr>
map th  :-tabnext<CR>
map tl  :+tabnext<CR>
" Move the tabs with tmn and tmi
map tmh :-tabmove<CR>
map tml :+tabmove<CR>
map t1  1gt
map t2  2gt
map t3  3gt
map t4  4gt
map t5  5gt

" Switch to last-active tab
if !exists('g:lasttab')
  let g:lasttab = 1
endif
nmap tt :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Buffer setting
nmap bl  :bnext<CR>
nmap bh  :bprev<CR>
nmap bc  :bdelete <CR>
nmap bb  <C-^>

" open a new tab for each open buffer
nmap bt  :tab sball<CR>

"When you open the file, the cursor will stay where the file was last opened. 
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Press space and to jump to the next and edit it
nnoremap ;; a<++><Esc>/<++><CR>
noremap <LEADER><LEADER> <Esc>/<++><CR>:nohlsearch<CR>"_c4l
:match StatusLineTermNC /<++>/

" the setting about deleting
noremap  <leader>x  "_x
noremap <leader>dd "_dd
noremap <leader>di  "_di
vnoremap <leader>d  "_d
nnoremap <leader>D  "_D

" copy and deleting without line break
nnoremap 'd v$hd
nnoremap 'y v$hy

" delete from current to begin
nnoremap X d^

" ========
" ======== startify
" ========
nnoremap st :Startify<CR>

" ========
" ======== NERDTree
" ========
map tt :NERDTreeToggle<CR>
map tn :NERDTreeFind<CR>
let NERDTreeMapOpenInTab = "o"
let NERDTreeShowBookmarks=1 
" let Nerd Christmas Tree=1   "Make the NERD Tree more beautiful
let NERDTreeIgnore = [
            \ '\.git$', '\.hg$', '\.svn$', '\.stversions$', '\.pyc$', '\.pyo$', '\.svn$', '\.swp$',
            \ '\.DS_Store$', '\.sass-cache$', '__pycache__$', '\.egg-info$', '\.ropeproject$',
            \ ]


" ========
" ======== vim-autoformat
" ========
noremap \f :Autoformat<CR>

" ========
" ======== rainbow-parentheses-vim 
" ========
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" ========
" ======== Vim-Easy-Align
" ========
nmap <LEADER>a <Plug>(EasyAlign)
vmap <LEADER>a <Plug>(EasyAlign)

" ========
" ======== vim-commentary
" ========
autocmd FileType python,shell,coffee set commentstring=#\ %s
autocmd FileType java,c,cpp set commentstring=//\ %s

" ========
" ======== fzf.vim
" ========
nnoremap <silent> <Leader>f :Files<CR>
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>p :Lines<CR>
nnoremap <silent> <Leader>o :History<CR>
command! -bang -nargs=* Ag
   \ call fzf#vim#ag(<q-args>,
   \                 <bang>0 ? fzf#vim#with_preview('up:60%')
   \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
   \                 <bang>0)
nnoremap <silent> <Leader>A :Ag<CR>


" ========
" ======== easymotion
" ========
nmap ss <Plug>(easymotion-s2)

" ===
" === MarkdownPreview
" ===
let g:mkdp_auto_start = 0
let g:mkdp_refresh_slow = 1
let g:mkdp_auto_close = 0

" ===
" === vim-table-mode
" ===
noremap <LEADER>tm :TableModeToggle<CR>
let g:table_mode_cell_text_object_i_map = 'k<Bar>'
